<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder
		ignore-resource-not-found="true" location="classpath*:/sc.properties" />

	<!-- 
		redis连接池配置:jedis基于 commons-pool2-2.3.jar 自己实现了一个资源池。
		配置参数详见 http://blog.csdn.net/liang_love_java/article/details/50510753
	-->  
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大空闲数 -->    
		<property name="maxIdle" value="${redis.maxidle}" />
		<!--连接池的最大数据库连接数 -->  
		<property name="maxTotal" value="${redis.maxtotal}" />
		<!--最大建立连接等待时间 -->    
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		
		<!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟) -->  
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
		<!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3 -->  
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
		<!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1 -->  
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
	
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->    
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!--在空闲时检查有效性, 默认false -->  
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />   
        
        <property name="blockWhenExhausted" value="true" /> 
	</bean> 
	
	<!--redis连接工厂: 单机模式 -->  
	<bean id="jedisConnectionFactory"
			class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
			destroy-method="destroy">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />  
		<property name="usePool" value="true" />
		<!--客户端超时时间单位是毫秒 -->  
        <property name="timeout" value="${redis.timeout}"></property>   
	</bean>
    
    <!--redis连接工厂: 集群模式 -->  
    <!-- 
		redis集群配置 哨兵模式 
		mymaster这个值要和Sentinel中指定的master的值一致，不然启动时找不到Sentinel会报错的  
		sentinels属性是指定Sentinel的IP和端口，不是Master和Slave的  
	-->  
    <!-- 
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"></constructor-arg>  
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>  
    </bean> 
    
    <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">  
        <property name="master">  
            <bean class="org.springframework.data.redis.connection.RedisNode">  
                <property name="name" value="mymaster"></property>  
            </bean>  
        </property>  
        <property name="sentinels">  
            <set>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.sentinel.host1}"></constructor-arg>  
                    <constructor-arg name="port" value="${redis.sentinel.port1}"></constructor-arg>  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.sentinel.host2}"></constructor-arg>  
                    <constructor-arg name="port" value="${redis.sentinel.port2}"></constructor-arg>  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.sentinel.host3}"></constructor-arg>  
                    <constructor-arg name="port" value="${redis.sentinel.port3}"></constructor-arg>  
                </bean>  
            </set>  
        </property>  
    </bean>  
    -->    
	
	<!--
		RedisTemplate操作模版,使用该对象可以操作redis 
		value的serializer也可为：org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer
	-->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory"   ref="jedisConnectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>     
        </property> 
        <!--开启事务  -->  
        <property name="enableTransactionSupport" value="true"></property>  
     </bean>

	<bean id="redisUtil" class="org.liws.redis.RedisUtil">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>  

</beans>
